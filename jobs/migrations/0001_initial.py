# Generated by Django 4.0.4 on 2024-12-09 12:32

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AsanaTask',
            fields=[
                ('task_name', models.CharField(max_length=250)),
                ('task_gid', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True)),
                ('stair_catery', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'INTEGRATIONS].[ASANA_TASK',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('branch_name', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('branch_guid', models.UUIDField(default=uuid.uuid4)),
            ],
            options={
                'db_table': 'QUOTING_SYSTEM_DB].[Branch',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ResourceGroup',
            fields=[
                ('group_id', models.AutoField(primary_key=True, serialize=False)),
                ('group_name', models.CharField(max_length=50)),
                ('group_parent_group', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'HR_SYSTEM].[RESOURCE_GROUP',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ResourceGroupCategory',
            fields=[
                ('group_catery_name', models.CharField(max_length=50, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'HR_SYSTEM].[RESOURCE_GROUP_CATERY',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('state_name', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('state_phone_code', models.CharField(blank=True, max_length=2, null=True)),
                ('state_abbr', models.CharField(blank=True, max_length=3, null=True)),
            ],
            options={
                'db_table': 'QUOTING_SYSTEM_DB].[STATE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Error',
            fields=[
                ('error_id', models.AutoField(primary_key=True, serialize=False)),
                ('error_desc', models.TextField()),
                ('error_department', models.IntegerField()),
            ],
            options={
                'db_table': 'QUALITY_SYSTEM].[ERROR',
            },
        ),
        migrations.CreateModel(
            name='ErrorGroup',
            fields=[
                ('error_group_id', models.AutoField(primary_key=True, serialize=False)),
                ('error_group_name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'db_table': 'QUALITY_SYSTEM].[ERROR_GROUP',
            },
        ),
        migrations.CreateModel(
            name='ErrorReport',
            fields=[
                ('error_report_id', models.AutoField(primary_key=True, serialize=False)),
                ('reported_at_time', models.DateTimeField(db_column='reported_at_time', default=django.utils.timezone.now)),
                ('comments', models.TextField(blank=True, db_column='comments', null=True)),
                ('hr_id', models.ForeignKey(db_column='hr_id', on_delete=django.db.models.deletion.CASCADE, to='accounts.humanresource')),
                ('reported_at_department', models.ForeignKey(db_column='reported_at_department', on_delete=django.db.models.deletion.CASCADE, to='jobs.resourcegroup')),
                ('task_gid', models.ForeignKey(db_column='task_gid', on_delete=django.db.models.deletion.CASCADE, to='jobs.asanatask')),
            ],
            options={
                'db_table': 'report_system].[error_report',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='JobTrackingEntry',
            fields=[
                ('entry_id', models.AutoField(primary_key=True, serialize=False)),
                ('entry_date', models.DateField()),
                ('entry_job_id', models.IntegerField(blank=True, null=True)),
                ('entry_start_time', models.DateTimeField(blank=True, null=True)),
                ('entry_end_time', models.DateTimeField(blank=True, null=True)),
                ('entry_comment', models.TextField(blank=True, null=True)),
                ('entry_is_complete', models.BooleanField(default=False)),
                ('entry_area_group', models.ForeignKey(db_column='ENTRY_AREA_GROUP_ID', on_delete=django.db.models.deletion.CASCADE, related_name='job_tracking_entries', to='jobs.resourcegroup')),
                ('entry_branch_name', models.ForeignKey(db_column='ENTRY_BRANCH_NAME', on_delete=django.db.models.deletion.CASCADE, related_name='job_tracking_entries', to='jobs.branch')),
                ('entry_hr', models.ForeignKey(db_column='ENTRY_HR_ID', on_delete=django.db.models.deletion.CASCADE, related_name='job_tracking_entries', to='accounts.humanresource')),
                ('entry_task_gid', models.ForeignKey(db_column='ENTRY_TASK_GID', on_delete=django.db.models.deletion.CASCADE, related_name='job_tracking_entries', to='jobs.asanatask')),
            ],
            options={
                'db_table': 'PRODUCTION_SYSTEM].[JOB_TRACKING_ENTRY',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='JobTrackingEntryImage',
            fields=[
                ('entry_image_id', models.AutoField(db_column='ENTRY_IMAGE_ID', primary_key=True, serialize=False)),
                ('entry_image_url', models.TextField(db_column='ENTRY_IMAGE_URL')),
                ('entry_id', models.ForeignKey(db_column='ENTRY_ID', on_delete=django.db.models.deletion.CASCADE, to='jobs.jobtrackingentry')),
            ],
            options={
                'db_table': 'PRODUCTION_SYSTEM].[JOB_TRACKING_ENTRY_IMAGE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ErrorReportImage',
            fields=[
                ('error_report_image_id', models.AutoField(primary_key=True, serialize=False)),
                ('image_url', models.TextField(db_column='image_url')),
                ('error_report_id', models.ForeignKey(db_column='error_report_id', on_delete=django.db.models.deletion.CASCADE, to='jobs.errorreport')),
            ],
            options={
                'db_table': 'report_system].[error_report_image',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ErrorReportError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_id', models.ForeignKey(db_column='error_id', on_delete=django.db.models.deletion.CASCADE, to='jobs.error')),
                ('error_report_id', models.ForeignKey(db_column='error_report_id', on_delete=django.db.models.deletion.CASCADE, to='jobs.errorreport')),
            ],
            options={
                'db_table': 'report_system].[error_report_error',
                'managed': True,
                'unique_together': {('error_report_id', 'error_id')},
            },
        ),
        migrations.CreateModel(
            name='ErrorGroupError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_group_id', models.ForeignKey(db_column='error_group_id', on_delete=django.db.models.deletion.CASCADE, to='jobs.errorgroup')),
                ('error_id', models.ForeignKey(db_column='error_id', on_delete=django.db.models.deletion.CASCADE, to='jobs.error')),
            ],
            options={
                'db_table': 'quality_system].[error_group_error',
                'managed': True,
                'unique_together': {('error_group_id', 'error_id')},
            },
        ),
    ]
